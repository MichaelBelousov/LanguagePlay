
/* Fluster Bison Grammar */

/***********
 Definitions
 ***********/

%skeleton "lalr1.cc"
%require "3.0"

%{
/*
  #include <stdio.h>
  #include <cmath>
  #include <ctype>
*/
  #include <iostream>
  #define DEBUG
%}

%code requires{
  namespace yy {
    class Lexer;
  }
}

%parse-param { yy::Lexer& lexer }

%code{
  #include "lexer.h"
  #undef yylex
  #define yylex lexer.yylex
%}

/*%define api.pure full*/

%union {
    long long   integer;
    long double floating;
    char*       bytes;
    std::string id;
}

/* tokens */

%token <id> CLASS STRUCT FUNC
%token EQRANGLE COMMA STAR MESSAGE COLON DOT
%token <id> ID 
%token LANGLE RANGLE LBRACK RBRACK LPAR RPAR LBRACE RBRACE
%token INDENT OUTDENT
%token <integer> INTEGER
%token <floating> FLOATING
%token <bytes> BYTES
%token <bytes> BITS
/*%start input*/

/* ops */
/* %left PLUS DASH               /*|   + -       |*/
/* %left STAR FSLASH TWOFSLASH   /*|   * / //    |*/
/* %right CARET CARETFSLASH      /*|   ^ ^/      |*/
/* %precedence UNARY             /*|   ^ ^/ -    |*/

%%

/**************************
 Grammer Rules and Actions
 **************************/

input: 
     %empty | input line ;

line:
  '\n' 
| any '\n'      {                           }
| error '\n'    { yyerrok;                  } 
;

any:
  lit
| class_decl
| struct_decl
| func_decl;

lit:
  INTEGER
| FLOATING
| BYTES
| BITS
;

/*
| exp PLUS exp                
| exp DASH exp              
| DASH exp %prec UNARY     
| exp STAR exp            
| exp FSLASH exp         
| exp TWOFSLASH exp     
| exp CARET exp        
| CARET exp %prec UNARY
| exp CARETFSLASH exp
| CARETFSLASH exp %prec UNARY
| '(' exp ')'
| lambda
;
*/

/*
lambda: 
  caparglist parlist EQRANGLE exp
  ;
*/

commalist:
  %empty
  | commalist COMMA
    /*{ $$ += $2; }*/
  | commalist ID
    /*{ $$ += $2; }*/
  ;

parlist:    LPAR   commalist RPAR
/*
bracklist:  LBRACK commalist RBRACK
bracelist:  LBRACE commalist RBRACE
*/
anglelist:  LANGLE commalist RANGLE

class_decl:
  CLASS decl INDENT
  {
    #ifdef DEBUG
        //cout << "class:" << $2 << endl;
    #endif
  }
;

struct_decl:
  STRUCT decl INDENT
;

func_decl: 
  FUNC decl parlist INDENT
;

/*
method: %empty;
assert: %empty;
*/
    
decl:
  ID
  | ID anglelist
;
  

%%

/****************
 Additional Code
 ****************/

void yy::parser::error(const location_type& loc, const std::string& msg)
{
    std::cerr << msg << " at " << loc << std::endl;
}

/*
int main(void)
{
  return yyparse();
}
*/


