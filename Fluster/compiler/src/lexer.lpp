
/*** RE/flex Preamble ***/

%top{
  #include <cmath>
  #include "tokens.h"
  #include "parser.h"
%}

%class{
%}

%init{
%}

/*** Definitions ***/


ident               [_a-zA-Z][_a-zA-Z0-9]*
digit               [0-9]
bit                 [01]
hex                 [0-9a-fA-F]
octal               [0-7]
decnum_start        [1-9]+
decint              {decnum_start}{digit}*
any                 .|\n
string_content      {any}*[^\\]


/*** Options***/

%o debug

%o outfile="lexer.cpp" header-file="lexer.h"
%o namespace=yy
%o lexer=Lexer
%o lex=yylex
%o yylineno
%o noyywrap
%o bison
%o reentrant
/*%o bison-bridge*/

%o tabs=4


/* ********************************************************************************** */ 
/* ********************************************************************************** */ 
/* ********************************************************************************** */ 
%%
/* ********************************************************************************** */ 
/* ********************************************************************************** */ 
/* ********************************************************************************** */ 



/*** operators ***/

"<"             return toks::ops::langle;
"<="            return toks::ops::langleeq;
"=="            return toks::ops::doubleeq;
"#="            return toks::ops::hasheq;
"<=>"           return toks::ops::langleeqrangle;
"~"             return toks::ops::tilde;
"~~"            return toks::ops::tildetilde;
"!="            return toks::ops::bangeq;
">="            return toks::ops::rangleeq;
">"             return toks::ops::rangle;
"+"             return toks::ops::plus;
"-"             return toks::ops::dash;
"*"             return toks::ops::star;
"/"             return toks::ops::fslash;
"//"            return toks::ops::doublefslash;
"%"             return toks::ops::percent;
"^"             return toks::ops::caret;
"^/"            return toks::ops::caretfslash;
\<has\>         return toks::ops::has;
\<is\>          return toks::ops::is;
"&"             return toks::ops::ampersand;
"|"             return toks::ops::pipe;
">>"            return toks::ops::doublerangle;
"<<"            return toks::ops::doublelangle;
"->"            return toks::ops::dashrangle;
"="             return toks::ops::eq;
"+="            return toks::ops::pluseq;
"-="            return toks::ops::dasheq;
"*="            return toks::ops::stareq;
"/="            return toks::ops::fslasheq;
"//="           return toks::ops::doublefslasheq;
"^/="           return toks::ops::caretfslasheq;
"^="            return toks::ops::careteq;
"&="            return toks::ops::ampersandeq;
"|="            return toks::ops::pipeeq;
"~="            return toks::ops::tildeeq;
">>="           return toks::ops::doublerangleeq;
"<<="           return toks::ops::doublelangleeq;
"->="           return toks::ops::dashrangleeq;
"$"             return toks::ops::dollar;
"<-"            return toks::ops::langledash;
"..."           return toks::ops::dotdotdot;
"["             return toks::ops::lbrack;
"]"             return toks::ops::rbrack;
"{"             return toks::ops::lbrace;
"}"             return toks::ops::rbrace;
"("             return toks::ops::lpar;
")"             return toks::ops::rpar;
"."             return toks::ops::dot;
","             return toks::ops::comma;
"=>"            return toks::ops::eqrangle;
":"             return toks::ops::colon;
"@"             return toks::ops::at;
"?"             return toks::ops::ques;

\<in\>          return toks::kwords::in_;
\<contains\>    return toks::kwords::contains_;
\<assert\>      return toks::kwords::assert_;
\<mod\>         return toks::kwords::mod_;
\<if\>          return toks::kwords::if_;
\<else\>        return toks::kwords::else_;
\<elif\>        return toks::kwords::elif_;
\<for\>         return toks::kwords::for_;
\<while\>       return toks::kwords::while_;
\<until\>       return toks::kwords::until_;
\<try\>         return toks::kwords::try_;
\<catch\>       return toks::kwords::catch_;
\<throw\>       return toks::kwords::throw_;
\<with\>        return toks::kwords::with_;
\<struct\>      return toks::kwords::struct_;
\<class\>       return toks::kwords::class_;
\<const\>       return toks::kwords::const_;
\<typeof\>      return toks::kwords::typeof_;
\<cloneof\>     return toks::kwords::cloneof_;
\<import\>      return toks::kwords::import_;


{ident} {
}

/*** literals ***/

/* int literals */
{decint}                                    {
                                                yylval.integer = strtoll(text(), NULL, 10);
                                                return toks::lits::int_;
                                            }

/* float literal */
{decint}(\.{digit}+)?([Ee][+-]?{decint})?   {   
                                                yylval.floating = strtold(text(), NULL);
                                                return toks::lits::float_;
                                            }

/* byte literals */
0x{hex}*    {
    char bytes[] = new char[ceil((strlen(text())-2)/2.0)];
    bool do_load = false; //could move this to the oddness of i
    char byte;
    for (int i = 0; p[i]; ++i, commit = !commit) 
    { 
        char val;
        if (do_load) {  //we're loading the first hex numeral
            if (p[i] <= 57) //is an ascii number
                val = p[i] - 48;
            else            //is an ascii letter
                val = (p[i] | (1<<5)) - 87;
            byte = val;
        }
        else {
            if (p[i] <= 57) //is an ascii number
                val = p[i] - 48
            else            //is an ascii letter
                val = (p[i] | (1<<5)) - 87;
            byte |= val << 4    //add the more significant nibble
            bytes[i/2] = byte;  //relying on floor division
        }
        
    }
    yylval.bytes = bytes;
    return toks::lits::byte_;
}

/* bit literal */
0b{bit}*    {
    //FIXME: untested and I may have loaded the byte stream backwards
    //just use rshift and reverse the process. Maybe make all this
    //repetitive code into a procedure, too
    char bytes[] = new char[ceil((strlen(text())-2)/8.0)];
    char byte;
    //TODO: replace depthmax literal with constexpr var
    for (int i=0, depth=0; p[i]; ++i, depth=(++depth%8))
    { 
        byte |= (p[i] - 48) << depth;
        //TODO: package in a lambda for reuse
        if (depth == 7) {
            bytes[i/2] = byte; //relying on floor division
            byte = 0;
        }
    }
    if (depth) {
        bytes[i/2] = byte; //relying on floor division
        byte = 0;
    }
    yylval.bytes = bytes;
    return toks::lits::bit_;
}

/* octal literal */
0o{octal}   {
    //FIXME: untested and I may have loaded the byte stream backwards
    //TODO: account for endianness
    char bytes[] = new char[ceil((strlen(text())-2)/3.0)];
    char* head = bytes;
    char word[4];  //32 bit buffer for 24 bit chunks
    int& wordval = reinterpret_cast<int&>(&wordbyte);
    //TODO: replace depthmax literal with constexpr var
    for (int i=0, depth=0; p[i]; ++i, depth=(++depth%8))
    { 
        //TODO: package in a lambda for reuse
        wordval |= (p[i] - 48) << depth*3;
        if (depth == 7) {
            head[i] = word[0];
            head[i+1] = byte;
            head[i+2] = byte;
            byte = 0;
            wordval = 0;
            head += 3;
        }
    }
    //FIXME: optimize using a lambda or (god-forbid) a **label+goto**
    if (depth) {
        head[i] = word[0];
        head[i+1] = byte;
        head[i+2] = byte;
        byte = 0;
        wordval = 0;
        head += 3;
    }
    yylval.bytes = bytes;
    return toks::lits::byte_;
}

/* string literal */
\"{string_content}\"                        return toks::lits::string_;

/* unicode literal */
u\"(?u:{string_content})\"                  return toks::lits::string_unicode_;

/* raw string literal */
\`{string_content}\`                        return toks::lits::string_raw_;



/*** miscellanious ***/


/* multiline comment */
"/*"(.|\n)*?"*/"                            //ignore

/* eol comment */
"//".*                                      //ignore

/* eof */
<<EOF>>                                     return -1;



/*** indentation ***/

^\h*\i          return toks::spc::indent;

^\h*\j          return toks::spc::outdent;

\j              return toks::spc::outdent;

(?^\\\n\h*)     //ignore space after line-end backslash

\\              return toks::spc::indent; //add indent after in-line backslash


/* ********************************************************************************** */ 
/* ********************************************************************************** */ 
/* ********************************************************************************** */ 
%%
/* ********************************************************************************** */ 
/* ********************************************************************************** */ 
/* ********************************************************************************** */ 


int main()
{
    return Lexer().lex();
}

