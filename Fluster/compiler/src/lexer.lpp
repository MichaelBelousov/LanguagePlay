
/*** RE/flex Preamble ***/

%top{
  #include <string>
  #include "parser.h"
  #include "driver.h"
  #include "lexer_routines.h"
%}

%class{
%}

%init{
%}

/*** Definitions ***/


id                  [_a-zA-Z][_a-zA-Z0-9]*
digit               [0-9]
bit                 [01]
hex                 [0-9a-fA-F]
octal               [0-7]
decnum_start        [1-9]+
decint              {decnum_start}{digit}*
any                 .|\n
string_content      {any}*[^\\]


/*** Options***/

%o debug

%o outfile="lexer.cpp" header-file="lexer.h"
%o namespace=yy
%o lexer=Lexer
/*%o lex=yylex*/
%o noyywrap nounput noinput batch debug
%o bison
%o reentrant

%o tabs=4


/* ********************************************************************************** */ 
/* ********************************************************************************** */ 
/* ********************************************************************************** */ 
%%
/* ********************************************************************************** */ 
/* ********************************************************************************** */ 
/* ********************************************************************************** */ 



/*** operators ***/

"<"             return yy::parser::make_LANGLE (loc);
"<="            return yy::parser::make_LANGLEEQ (loc);
"=="            return yy::parser::make_DOUBLEEQ (loc);
"#="            return yy::parser::make_HASHEQ (loc);
"<=>"           return yy::parser::make_LANGLEEQRANGLE (loc);
"~"             return yy::parser::make_TILDE (loc);
"~~"            return yy::parser::make_TILDETILDE (loc);
"!="            return yy::parser::make_BANGEQ (loc);
">="            return yy::parser::make_RANGLEEQ (loc);
">"             return yy::parser::make_RANGLE (loc);
"+"             return yy::parser::make_PLUS (loc);
"-"             return yy::parser::make_DASH (loc);
"*"             return yy::parser::make_STAR (loc);
"/"             return yy::parser::make_FSLASH (loc);
"//"            return yy::parser::make_DOUBLEFSLASH (loc);
"%"             return yy::parser::make_PERCENT (loc);
"^"             return yy::parser::make_CARET (loc);
"^/"            return yy::parser::make_CARETFSLASH (loc);
\<has\>         return yy::parser::make_HAS (loc);
\<is\>          return yy::parser::make_IS (loc);
"&"             return yy::parser::make_AMPERSAND (loc);
"|"             return yy::parser::make_PIPE (loc);
">>"            return yy::parser::make_DOUBLERANGLE (loc);
"<<"            return yy::parser::make_DOUBLELANGLE (loc);
"->"            return yy::parser::make_DASHRANGLE (loc);
"="             return yy::parser::make_EQ (loc);
"+="            return yy::parser::make_PLUSEQ (loc);
"-="            return yy::parser::make_DASHEQ (loc);
"*="            return yy::parser::make_STAREQ (loc);
"/="            return yy::parser::make_FSLASHEQ (loc);
"//="           return yy::parser::make_DOUBLEFSLASHEQ (loc);
"^/="           return yy::parser::make_CARETFSLASHEQ (loc);
"^="            return yy::parser::make_CARETEQ (loc);
"&="            return yy::parser::make_AMPERSANDEQ (loc);
"|="            return yy::parser::make_PIPEEQ (loc);
"~="            return yy::parser::make_TILDEEQ (loc);
">>="           return yy::parser::make_DOUBLERANGLEEQ (loc);
"<<="           return yy::parser::make_DOUBLELANGLEEQ (loc);
"->="           return yy::parser::make_DASHRANGLEEQ (loc);
"$"             return yy::parser::make_DOLLAR (loc);
"<-"            return yy::parser::make_LANGLEDASH (loc);
"..."           return yy::parser::make_DOTDOTDOT (loc);
"["             return yy::parser::make_LBRACK (loc);
"]"             return yy::parser::make_RBRACK (loc);
"{"             return yy::parser::make_LBRACE (loc);
"}"             return yy::parser::make_RBRACE (loc);
"("             return yy::parser::make_LPAR (loc);
")"             return yy::parser::make_RPAR (loc);
"."             return yy::parser::make_DOT (loc);
","             return yy::parser::make_COMMA (loc);
"=>"            return yy::parser::make_EQRANGLE (loc);
":"             return yy::parser::make_COLON (loc);
"@"             return yy::parser::make_AT (loc);
"?"             return yy::parser::make_QUES (loc);

\<in\>          return yy::parser::make_IN (loc);
\<contains\>    return yy::parser::make_CONTAINS (loc);
\<assert\>      return yy::parser::make_ASSERT (loc);
\<mod\>         return yy::parser::make_MOD (loc);
\<if\>          return yy::parser::make_IF (loc);
\<else\>        return yy::parser::make_ELSE (loc);
\<elif\>        return yy::parser::make_ELIF (loc);
\<for\>         return yy::parser::make_FOR (loc);
\<while\>       return yy::parser::make_WHILE (loc);
\<until\>       return yy::parser::make_UNTIL (loc);
\<try\>         return yy::parser::make_TRY (loc);
\<catch\>       return yy::parser::make_CATCH (loc);
\<throw\>       return yy::parser::make_THROW (loc);
\<with\>        return yy::parser::make_WITH (loc);
\<struct\>      return yy::parser::make_STRUCT (loc);
\<class\>       return yy::parser::make_CLASS (loc);
\<const\>       return yy::parser::make_CONST (loc);
\<typeof\>      return yy::parser::make_TYPEOF (loc);
\<cloneof\>     return yy::parser::make_CLONEOF (loc);
\<import\>      return yy::parser::make_IMPORT (loc);


{id}                                        return yy::parser::make_IDENTIFIER(yytext, loc);

/*** literals ***/

/* int literals */
{decint}                                    return make_DECIMINTEGER (yytext, loc);

/* float literal */
{decint}(\.{digit}+)?([Ee][+-]?{decint})?   return make_DECIMFLOAT (yytext, loc);

/* byte literals */
0x{hex}*                                    return make_HEXBYTES (yytext, loc);

/* bit literal */
0b{bit}*                                    return make_BINARYBITS (yytext, loc);

/* octal literal */
0o{octal}                                   return make_OCTALBITS (yytext, loc);

/* string literal */                        /* TODO: use a state to dedent source */
\"{string_content}\"                        return make_STRING (yytext, loc);

/* unicode literal */
u\"(?u:{string_content})\"                  return make_UNICODESTRING (yytext, loc);

/* raw string literal */
\`{string_content}\`                        return make_RAWSTRING (yytext, loc);



/*** miscellanious ***/


/* multiline comment */
"/*"(.|\n)*?"*/"                            //ignore

/* eol comment */
"//".*                                      //ignore

/* eof */
<<EOF>>                                     return yy::parser::make_END (loc);



/*** indentation ***/

^\h*\i          return toks::spc::indent;

^\h*\j          return toks::spc::outdent;

\j              return toks::spc::outdent;

(?^\\\n\h*)     //ignore space after line-end backslash

\\              return toks::spc::indent; //add indent after in-line backslash


/* ********************************************************************************** */ 
/* ********************************************************************************** */ 
/* ********************************************************************************** */ 
%%
/* ********************************************************************************** */ 
/* ********************************************************************************** */ 
/* ********************************************************************************** */ 
